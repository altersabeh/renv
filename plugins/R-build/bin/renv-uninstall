#!/usr/bin/env bash
#
# Summary: Uninstall a specific R version
#
# Usage: renv uninstall [-f|--force] <version>
#
#    -f  Attempt to remove the specified version without prompting
#        for confirmation. If the version does not exist, do not
#        display an error message.
#
# See `renv versions` for a complete list of installed versions.
#
set -e

# Provide renv completions
if [ "$1" = "--complete" ]; then
  echo --force
  exec renv versions --bare
fi

usage() {
  renv-help uninstall 2>/dev/null
  [ -z "$1" ] || exit "$1"
}

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  usage 0
fi

unset FORCE
if [ "$1" = "-f" ] || [ "$1" = "--force" ]; then
  FORCE=true
  shift
fi

[ "$#" -eq 1 ] || usage 1 >&2

DEFINITION="$1"
case "$DEFINITION" in
"" | -* )
  usage 1 >&2
  ;;
esac

declare -a before_hooks after_hooks

before_uninstall() {
  local hook="$1"
  before_hooks["${#before_hooks[@]}"]="$hook"
}

after_uninstall() {
  local hook="$1"
  after_hooks["${#after_hooks[@]}"]="$hook"
}

OLDIFS="$IFS"
IFS=$'\n' scripts=(`renv-hooks uninstall`)
IFS="$OLDIFS"
for script in "${scripts[@]}"; do source "$script"; done


VERSION_NAME="${DEFINITION##*/}"
PREFIX="${RENV_ROOT}/versions/${VERSION_NAME}"

if [ -z "$FORCE" ]; then
  if [ ! -d "$PREFIX" ]; then
    echo "renv: version \`$VERSION_NAME' not installed" >&2
    exit 1
  fi

  read -p "renv: remove $PREFIX? [y|N]"
  case "$REPLY" in
  y | Y | yes | YES ) ;;
  * ) exit 1 ;;
  esac
fi

for hook in "${before_hooks[@]}"; do eval "$hook"; done

if [ -d "$PREFIX" ]; then
  rm -rf "$PREFIX"
  renv-rehash
  echo "renv: $VERSION_NAME uninstalled"
fi

for hook in "${after_hooks[@]}"; do eval "$hook"; done
